import configparser, logging, time
import dbwork
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

# –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
config = configparser.ConfigParser()
config.read('config.ini')

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
API_TOKEN = config['Telegram']['API_TOKEN']
COOLDOWN_TIME_CASINO = int(config['Telegram']['COOLDOWN_TIME_CASINO'])
COOLDOWN_TIME_FREE_MONEY = int(config['Telegram']['COOLDOWN_TIME_FREE_MONEY'])

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã
user_cooldowns = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°–ø–∏—Å–∫–∏ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
CASINO_COMMANDS = {'–∫–∞–∑', '–ö–ê–ó', '–ö–∞–∑', '–∫–∞–∑–∏', '–ö–ê–ó–ò', '–ö–∞–∑–∏', '–∫–∞–∑–∏–Ω', '–ö–ê–ó–ò–ù', '–ö–∞–∑–∏–Ω', '–∫–∞–∑–∏–Ω–æ', '–ö–ê–ó–ò–ù–û', '–ö–∞–∑–∏–Ω–æ'}

# –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —á–∞—Ç–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
WHITE_LIST_CHATS = list(map(int, config['Telegram']['WHITE_LIST_CHATS'].split(', ')))
WHITE_LIST_USERS = list(map(int, config['Telegram']['WHITE_LIST_USERS'].split(', ')))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —á–∞—Ç –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ
def is_chat_allowed(chat_id: int, user_id: int = None) -> bool | None:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —á–∞—Ç –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ
    if chat_id in WHITE_LIST_CHATS:
        return True
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ
    if user_id and user_id in WHITE_LIST_USERS:
        return True

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def on_help(message: types.Message):
    if not is_chat_allowed(message.chat.id, message.from_user.id):
        return
    help_text = (
        "üìÑ –ö–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –µ—Å—Ç—å —É –±–æ—Ç–∞?\n\n"
        "- /start : –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —ç—Ç–æ–≥–æ –±–æ—Ç–∞\n"
        "- /help : –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n"
        "- /stats : –í—ã–≤–æ–¥–∏—Ç –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "- /top : –í—ã–≤–æ–¥–∏—Ç —Ç–æ–ø –ª—é–¥–µ–π –≤ –ª—É–¥–æ–º–∞–Ω–∏–∏\n"
        "- /free : –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –ª—É–¥–æ–º–∞–Ω–∏–∏\n"
        "- –∫–∞–∑ <—á–∏—Å–ª–æ> : –ë—ã—Ç—å –ª—É–¥–æ–º–∞–Ω–æ–º –Ω–∞ 5 —Å–µ–∫—É–Ω–¥, —Å—Ç–∞–≤–∫–∞ –æ—Ç 50 –¥–µ–Ω–µ–≥"
    )
    await message.reply(help_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def on_start(message: types.Message):
    if not is_chat_allowed(message.chat.id, message.from_user.id):
        return
    user_id, user_name = message.from_user.id, message.from_user.full_name
    mention = f'<a href="tg://user?id={user_id}">{user_name}</a>'
    await message.answer(f"üåà –ü—Ä–∏–≤–µ—Ç, {mention}!", parse_mode="HTML")
    if dbwork.add_user(user_id):
        await message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!')
    else:
        await message.answer("‚ùó –¢—ã —É–∂–µ –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /free
@dp.message(Command("free"))
async def on_free(message: types.Message):
    if not is_chat_allowed(message.chat.id, message.from_user.id):
        return
    user_id = message.from_user.id
    if user_id in user_cooldowns and time.time() - user_cooldowns[user_id] < COOLDOWN_TIME_FREE_MONEY:
        remaining_time = int(COOLDOWN_TIME_FREE_MONEY - (time.time() - user_cooldowns[user_id]))
        await message.reply(f"üïë –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º.")
        return
    user_cooldowns[user_id] = time.time()
    mention = f'<a href="tg://user?id={user_id}">{message.from_user.full_name}</a>'
    await message.answer(dbwork.free_money(user_id, mention), parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
@dp.message(Command("stats"))
async def on_stats(message: types.Message):
    if not is_chat_allowed(message.chat.id, message.from_user.id):
        return
    user_id = message.from_user.id
    mention = f'<a href="tg://user?id={user_id}">{message.from_user.full_name}</a>'
    stats = dbwork.get_user_stats(user_id)
    if stats:
        await message.answer(
            f"üìÉ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {mention}:\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {stats[0]} –º–æ–Ω–µ—Ç\n"
            f"üé∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä: {stats[1]}", parse_mode="HTML")
    else:
        await message.answer(f'‚ùå {mention} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.', parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /top
@dp.message(Command("top"))
async def on_top(message: types.Message):
    if not is_chat_allowed(message.chat.id, message.from_user.id):
        return
    leaderboard = dbwork.get_leaderboard()
    if not leaderboard:
        await message.answer("‚ùå –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø—É—Å—Ç–∞.")
        return
    leaderboard_message = "üèÜ –¢–æ–ø-5 –∏–≥—Ä–æ–∫–æ–≤:\n\n"
    for index, telegram_id, count_money, count_game in leaderboard:
        user = await bot.get_chat(telegram_id)
        mention = f'<a href="tg://user?id={telegram_id}">{user.full_name}</a>'
        leaderboard_message += (
            f"{index}. {mention}:\n"
            f"üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {count_game}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {count_money} –º–æ–Ω–µ—Ç\n\n"
        )
    await message.answer(leaderboard_message, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∫–∞–∑–∏–Ω–æ
@dp.message(lambda message: message.text and message.text.split()[0].lower() in CASINO_COMMANDS)
async def on_casino(message: types.Message):
    if not is_chat_allowed(message.chat.id, message.from_user.id):
        return
    user_id = message.from_user.id
    parts = message.text.split()
    if len(parts) < 2:
        await message.reply("‚ùå –û—à–∏–±–∫–∞! –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å—Ç–∞–≤–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: –∫–∞–∑ 100")
        return
    try:
        amount = int(parts[1])
        if amount <= 50:
            await message.reply("‚ùå –û—à–∏–±–∫–∞! –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 50.")
            return
    except ValueError:
        await message.reply("‚ùå –û—à–∏–±–∫–∞! –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    if user_id in user_cooldowns and time.time() - user_cooldowns[user_id] < COOLDOWN_TIME_CASINO:
        remaining_time = int(COOLDOWN_TIME_CASINO - (time.time() - user_cooldowns[user_id]))
        await message.reply(f"üïë –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞–≤–∫–æ–π.")
        return
    user_cooldowns[user_id] = time.time()
    mention = f'<a href="tg://user?id={user_id}">{message.from_user.full_name}</a>'
    await message.reply(dbwork.casino(user_id, amount, mention), parse_mode="HTML")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    dp.run_polling(bot)
